---
title: xmms2-guile
subtitle: Reference Manual
author:
- name: Frank Terbeck
  email: ft@bewatermyfriend.org
...

# NAME

`xmms2-guile` — Client library for the XMMS2 Audio Player Server

# SYNOPSIS

~~~~~~~ {.Scheme}
;; These are just a couple of the modules provided by this library.
;; All of them live in the (xmms2 ...) namespace. See the individual
;; module descriptions in this manual for details.
(use-modules (xmms2 client)
             (xmms2 constants)
             (xmms2 ipc playlist)
             (xmms2 types)
             (xmms2 ...))
~~~~~~~


# DESCRIPTION

`xmms2-guile` is a native implementation of the XMMS2 protocol, aimed to
implement client applications to control an XMMS2 server. It has no external
depencencies, not on any foreign libraries that would be accessed via a
foreign-function-interface, nor for non-core Guile Scheme libraries.

The library has a couple of loosely connected parts: One part implements the
data serialisation and deserialisation to actually exchange data with a
server. Another part implements the low-level network code that actually
connects to a server. Other parts implement special data-types and XMMS2
specific value handling. Yet other parts implement all the inter-process
communication API that an XMMS2 server supports. And finally there are higher
level modules, that should make it more convenient to implement actual clients
on top of the library.

This manual aims to be a reference into all parts of the library. A full
library reference is a requirement for a `0.2.0` release. The plan is to
scrape function descriptions from source files as much as possible and to add
additional information as markdown text right in here.

## Overview

The library is made up of two parts: A core library, that implements the XMMS2
protocol and convenience functionality to aid in implementing client
applications; and a second part that is generated code from XMMS2's IPC
definition file. The core library implements a couple of macros, that shift
most of the actual code in generated modules into the core, so that the
generated name-spaces need to be regenerated only when the XMMS2 project makes
changes to their definition.

### The Core Library

Here is an overview of the core library modules in alphabetical order:

- `(xmms2 client)` — Client-side convenience functionality. This module has a
  helper to fire up a connection to a server with minimal effort.
- `(xmms2 client synchronous)` — High-level helpers to implement synchronous
  XMMS2 clients (See *Synchronous vs. Asynchronous* below for details).
- `(xmms2 constants)` — This module defines a couple of core constants, that
  are not defined by the IPC definition that is shipped by the XMMS2 project.
- `(xmms2 data-conversion)` — Low-level data conversion. This module contains
  functions and constant definitions to access and create byte-sequences as
  used by the XMMS2 protocol that represent basic integer data words.
- `(xmms2 enumeration)` — A macro implementation for expressing enumerations
  of constants. This is used by the `(xmms2 constants)` module as well as all
  sub-modules in the `(xmms2 constants …)` name-space.
- `(xmms2 fetch-spec)` — Another macro implementation for expressing *fetch
  specifications* (see *Querying the Media Library* below for details).
- `(xmms2 header)` — Functionality for creating and accessing XMMS2 protocol
  headers.
- `(xmms2 io)` — This module implements the network level data exchange
  procedures like `xmms2-connect`, `xmms2-send` and `xmms2-recv`, that talk to
  XMMS2 servers.
- `(xmms2 ipc)` — This is a module that implements data types like `methods`,
  `signals` and `broadcasts` as well as a macro that, in combination allows
  concise generation of modules in the `(xmms2 ipc …)` name-space from XMMS2's
  IPC definition.
- `(xmms2 jump-table)` — Jump-tables dispatch to different callbacks based on
  integer values. The `(xmms2 payload)` modules uses this.
- `(xmms2 payload)` — This is the main protocol implementation. It contains
  all serialisers and deserialisers for XMMS2 protocol data types as well
  front-ends for turning values from and into XMMS2 byte-streams.
- `(xmms2 types)` — Here all non-default data-types used by the protocol are
  implemented. In particular, this is where XMMS2's collections, and a domain
  specific language to express them in a convenient fashion, are defined.
- `(xmms2 values)` — This module implements any special value handling, that
  is used by the XMMS2 server. Currently, that means encoders and decoders for
  XMMS2's `url` encoding scheme.

### The `(xmms2 constants …)` Name-Space

The code in this name-space is completely generated. Except for the `(xmms2
constants meta)` module, each of these modules correspond to one of XMMS2's
server objects, like `main`, `playlist` or `media-library`. The `(xmms2
constants meta)` module is special in that it defines constants, that are do
not strictly belong to one of the object-specific modules.

The constants in these modules are mostly expressed using the `define-enum`
macro from the `(xmms2 enumeration)` module. This allows the use of symbolic
values instead of cryptic numeric data in client code; for example, the
`OBJECT-MAIN` symbol evaluates to `1`. In addition, there are cross reference
association lists are put in place to allow mapping numeric values to human
readable symbols:

    (assoc-ref xref-objects 1) → OBJECT-MAIN

All of the constants correspond to the XMMS2 protocol version as defined by
the `PROTOCOL-VERSION` constant defined in the `(xmms2 constants meta)`
module.

### The `(xmms2 ipc …)` Name-Space

All modules in this name-space correspond to one of the XMMS2 server objects.
All code in these modules is generated from XMMS2's IPC definition file. Each
module may define an arbitrary amount of these IPC entities:

- `methods`
- `broadcasts`
- `signals`

For each of these entities, two data-points are generated:

- A generator function that returns a binary data packet, that can be send to
  an XMMS2 server using the `xmms2-send` procedure from the `(xmms2 io)`
  module.
- An introspection data-structure that holds all of the information from the
  XML IPC definition file from the XMMS2 project.

All generator functions are named `ipc-*` (for example: `ipc-pause` from
`(xmms2 ipc playback)` module). The naming scheme of the introspection data is
`PREFIX:NAME`, where `PREFIX` is one of `m`, `b` and `s`, depending on whether
the IPC entity is a `method`, a `broadcast` or a `signal`; for example:

- `m:add-collection` from `(xmms2 ipc playlist)`
- `b:quit` from `(xmms2 ipc main)`
- `s:unresolved-entries` from `(xmms2 ipc media-info-reader)`

Like with the `(xmms2 constants …)` name-space, all of the functionality
implemented by the modules from this name-space corresponds to the XMMS2
protocol version as defined by the `PROTOCOL-VERSION` constant defined in the
`(xmms2 constants meta)` module.

## Library Concepts

### Packet Layout and Data Representation

- `@TBD@`

### Synchronous vs. Asynchronous Operation

- `@TBD@`


# MODULE REFERENCE

## Core Modules

### `(xmms2 client)`

@include scheme/xmms2/client.mdwn@

### `(xmms2 client synchronous)`

@include scheme/xmms2/client/synchronous.mdwn@

### `(xmms2 constants)`

@include scheme/xmms2/constants.mdwn@

### `(xmms2 data-conversion)`

@include scheme/xmms2/data-conversion.mdwn@

### `(xmms2 enumeration)`

@include scheme/xmms2/enumeration.mdwn@

### `(xmms2 fetch-spec)`

@include scheme/xmms2/fetch-spec.mdwn@

### `(xmms2 header)`

@include scheme/xmms2/header.mdwn@

### `(xmms2 io)`

@include scheme/xmms2/io.mdwn@

### `(xmms2 ipc)`

@include scheme/xmms2/ipc.mdwn@

### `(xmms2 jump-table)`

@include scheme/xmms2/jump-table.mdwn@

### `(xmms2 payload)`

@include scheme/xmms2/payload.mdwn@

### `(xmms2 types)`

@include scheme/xmms2/types.mdwn@

### `(xmms2 values)`

@include scheme/xmms2/values.mdwn@


## Documentation Generation Modules

### `(documentation combine-markdown)`

@include scheme/documentation/combine-markdown.mdwn@

### `(documentation module)`

@include scheme/documentation/module.mdwn@

### `(documentation more)`

@include scheme/documentation/more.mdwn@

### `(documentation render-markdown)`

@include scheme/documentation/render-markdown.mdwn@


## Interprocess Communication Generation Modules

### `(scheme genipc stage-0.scm)`

@include scheme/genipc/stage-0.mdwn@

### `(scheme genipc stage-1.scm)`

@include scheme/genipc/stage-1.mdwn@

### `(scheme genipc stage-2.scm)`

@include scheme/genipc/stage-2.mdwn@

### `(scheme genipc stage-3.scm)`

@include scheme/genipc/stage-3.mdwn@

### `(scheme genipc utilities.scm)`

@include scheme/genipc/utilities.mdwn@


## Test Suite Modules

### `(test payload)`

@include scheme/test/payload.mdwn@

### `(test setup)`

@include scheme/test/setup.mdwn@


## Genrerated Constants Modules

### `(xmms2 constants binary-data)`

@include scheme/xmms2/constants/binary-data.mdwn@

### `(xmms2 constants collection)`

@include scheme/xmms2/constants/collection.mdwn@

### `(xmms2 constants collection-sync)`

@include scheme/xmms2/constants/collection-sync.mdwn@

### `(xmms2 constants configuration)`

@include scheme/xmms2/constants/configuration.mdwn@

### `(xmms2 constants courier)`

@include scheme/xmms2/constants/courier.mdwn@

### `(xmms2 constants ipc-manager)`

@include scheme/xmms2/constants/ipc-manager.mdwn@

### `(xmms2 constants main)`

@include scheme/xmms2/constants/main.mdwn@

### `(xmms2 constants media-info-reader)`

@include scheme/xmms2/constants/media-info-reader.mdwn@

### `(xmms2 constants media-library)`

@include scheme/xmms2/constants/media-library.mdwn@

### `(xmms2 constants meta)`

@include scheme/xmms2/constants/meta.mdwn@

### `(xmms2 constants playback)`

@include scheme/xmms2/constants/playback.mdwn@

### `(xmms2 constants playlist)`

@include scheme/xmms2/constants/playlist.mdwn@

### `(xmms2 constants visualization)`

@include scheme/xmms2/constants/visualization.mdwn@

### `(xmms2 constants xform)`

@include scheme/xmms2/constants/xform.mdwn@


## Genrerated IPC Modules

### `(xmms2 ipc binary-data)`

@include scheme/xmms2/ipc/binary-data.mdwn@

### `(xmms2 ipc collection)`

@include scheme/xmms2/ipc/collection.mdwn@

### `(xmms2 ipc collection-sync)`

@include scheme/xmms2/ipc/collection-sync.mdwn@

### `(xmms2 ipc configuration)`

@include scheme/xmms2/ipc/configuration.mdwn@

### `(xmms2 ipc courier)`

@include scheme/xmms2/ipc/courier.mdwn@

### `(xmms2 ipc ipc-manager)`

@include scheme/xmms2/ipc/ipc-manager.mdwn@

### `(xmms2 ipc main)`

@include scheme/xmms2/ipc/main.mdwn@

### `(xmms2 ipc media-info-reader)`

@include scheme/xmms2/ipc/media-info-reader.mdwn@

### `(xmms2 ipc media-library)`

@include scheme/xmms2/ipc/media-library.mdwn@

### `(xmms2 ipc playback)`

@include scheme/xmms2/ipc/playback.mdwn@

### `(xmms2 ipc playlist)`

@include scheme/xmms2/ipc/playlist.mdwn@

### `(xmms2 ipc visualization)`

@include scheme/xmms2/ipc/visualization.mdwn@

### `(xmms2 ipc xform)`

@include scheme/xmms2/ipc/xform.mdwn@


# EXAMPLE

To illustrate the use of the library, here is the full code for aa very simple
synchronous client connects to a XMMS2 server and fetches a list of all
artists, along with a count of the tracks available for each of those artists.

~~~~~~~ {.Scheme}
;; First, let's import  a couple of modules.  The ‘client’ module
;; is  pretty  straight forward…   …since  this  is a  client
;; application.
(use-modules (xmms2 client)
             ;; Since  this  is a  synchronous client,  let's use
             ;; that specific high-level module as well.
             (xmms2 client synchronous)
             ;; We are going to  make a media-library query using
             ;; ‘ipc-query’ which takes  a collection and a fetch
             ;; specification as argum-;  ents. This module helps
             ;; with specifying the latter.
             (xmms2 fetch-spec)
             ;; ‘ipc-query’ is defined in this module:
             (xmms2 ipc collection)
             ;; The  ‘types’  module  is  important,  because  it
             ;; implements   collections,   which  we   need  for
             ;; ‘ipc-query’.
             (xmms2 types))

;; This symbol evaluates to a packet (which is a byte-vector or a
;; list of byte-vectors; the latter  in this case). It represents
;; a complete protocol request,  that represents a ‘query’ method
;; call, with a UNIVERSE  collection and a non-trivial fetch-spec
;; as arguments.
(define *query*
  (ipc-query
    (make-universe)
    (fetch-spec #:type cluster-list
                #:cluster-by value
                #:cluster-field artist
                #:data (- #:type organize
                          #:data (- #:count (- #:type count)
                                    #:artist (- #:type metadata
                                                #:fields (artist)
                                                #:get (value)))))))

;; The fetch-spec,  as we designed  it, will cause the  server to
;; return a list of dictionaries,  each containing a ‘artist’ and
;; a ‘count’  key with their corresponding  values. This function
;; sorts that list by the ‘count’ values in the dictionaries.
(define (sort-artists lst)
  (sort lst (lambda (a b)
              (let ((a* (dict-ref 'count a))
                    (b* (dict-ref 'count b)))
                (< a* b*)))))

;; This uses  the *query*  we assembled  earlier, turns  the data
;; returned from the server, sorts it, reverses the order of that
;; list, to have the artist with most tracks in the media library
;; to occur before the ones with less tracks.
(define (get-sorted-artists srv)
  (reverse (sort-artists (request->value srv *query*))))

;; Finally, define a function that can  be used as a callback for
;; the  ‘with-xmms2-connection’ utility.  It iterates  across the
;; sorted  list, the  ‘get-sorted-artists’ procedure  returns and
;; print a line per entry.
(define (main server client-id cookie)
  (let loop ((rest (get-sorted-artists server)))
    (if (null? rest)
        #t
        (let ((data (dictionary-data (car rest))))
          (format #t "~a Tracks by ~a~%"
                  (assq-ref data 'count)
                  (assq-ref data 'artist))
          (loop (cdr rest))))))

;; This  puts it  all  together, connects  to  the default  XMMS2
;; server utility and uses the  #:handler callback to perform the
;; desired action.
(with-xmms2-connection #:handler main #:client "example-track-count")
~~~~~~~


# SEE ALSO

- The *Guile Reference Manual*
- The *XMMS2 Client Server Protocol — An Unreliable Hacker's Guide*
- [Collections 2.0 at the XMMS2 Wiki](https://xmms2.org/wiki/Collections_2.0)


# AUTHOR

Frank Terbeck `‹ft@bewatermyfriend.org›`


# COPYRIGHT AND LICENCE

Copyright (c) 2014—2017 Frank Terbeck `‹ft@bewatermyfriend.org›`, All rights
reserved.

This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.

This library is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with this library; if not, write to the Free Software Foundation, Inc., 51
Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
