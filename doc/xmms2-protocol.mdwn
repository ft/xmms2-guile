---
title: XMMS2 Client Server Protocol
subtitle: An Unreliable Hacker's Guide
author:
- name: Frank Terbeck
  email: ft@bewatermyfriend.org
section: 7
date: Jul, 2017
...

# Introduction

**Note: This is very much work in progress and serves as a scratch pad from
  time to time. This is by no means a polished reference to the XMMS2 protocol,
  which one could possibly guess by looking at the document's title.**

XMMS2[^xmms2] (X-platform Music Multiplexing System 2) is an audio player for
various operating systems. It uses a client-server setup, where the actual
playback is done by a server application, that can be controlled by one or more
client applications that interact with the user to provide an actual interface
to the player.

[^xmms2]: \url{http://xmms2.org}

In a client-server setup, both parts of the system need to agree on a protocol
to use in order to exchange data. XMMS2 is no exception with this basic
requirement.

Unfortunately the protocol is not canonically specified. Instead, it is
specified by implementation. In particular by the C client library and the
server implemenation[^serverimpl]. Most languages that provide library access
to XMMS2 implement their access by wrapping the C library[^javalib]. However
there is no further documenatation available.

[^serverimpl]: The server is also implemented in C.
[^javalib]: There is a Java client library, that implements the protocol
            natively.

This document is being written during the development of a native client
library for the GNU Guile implementation of the Scheme programming language.

With the Guile library, I started off as a wrapper around the XMMS2 C client
library. But I found myself writing lots of glue code in C, which is not what I
wanted at all. Using Guile's FFI would have also been a possibility, but I
suspect that to be a rather gnarly piece of work, since XMMS2 uses an
ubiquitous datatype to express many different types of values. Thus, the plan
to write a native implementation of the protocol was forged.

XMMS2's protocol is a binary protocol[^whybinary], which makes creating an
implementation off of a network sniffer log considerably harder.

[^whybinary]: With large playlists, the amount of data to be exchanced grows
              large. That is why it makes sense to use a binary protocol, to
              minimise the protocol overhead in any given transmission.

This document discusses the client-server protocol from the point of view of a
client application: The protocol is made up by binary messages. The client
makes requests and the server sends replies. Messages have a certain structure
and they may contain arbitrary payload data that is made up of an arbitrarily
nested structure of types. What is valid depends on the individual message.

**Note:** As it is the case with binary protocols, numbers encode values.
Sometimes the text will mention the actual octets that map to a certain meaning
(the C client library uses enums to do that; the Scheme library follows a
similar approach). Other times, it will refer to the name within the Scheme
library though. If you really want the numeric value for a symbol, you will be
able to get it by loading up a Guile REPL, load the `(xmms2 constants)` module
and inspect the value bound to the symbol you're after.


# Message Structure

This section is largely based on reading the C client library's code, which
uses a simple structure to store data that will actually be send over the wire:

``` C
struct xmms_ipc_msg_St {
	xmmsv_t *bb;
	uint32_t xfered;
};
```

The ‘`xmmsv_t`’ has support for a “bit-buffer” value[^bitbufferimpl], which is
what is used to build and store the binary message that will be send to the
server.

[^bitbufferimpl]: If you are interested, the implementation can be found in
   ‘`xmmsv_bitbuffer.c`’.

The first part of a message is the type of message[^msgtype] we're dealing
with. This is the first 32 Bits of the message. The next 32 Bits contain the
command id of the message[^helloid]. The rest of the message depends on the
payload that is sent along with the message. And if you take a look at the octet
representation[^byteisoctett] of the data on the wire, you will realise that
octets are not rotated in any fashion but appear as you would naïvely write them
out: The byte-order is *big-endian*.

[^msgtype]: XMMS2 has different types of messages, grouped by the kind of work
   they are used for. For example, commands like `HELLO` (whch are in the
   `XMMS_IPC_OBJECT_MAIN` group) are marked `00 00 00 01`, as per the
   `xmms_ipc_objects_t` enum defined in ‘`xmmsc_idnumbers.h`’.

[^helloid]: The `HELLO` command, for example will send `00 00 00 20`, since
   `XMMS_IPC_CMD_HELLO` is set to `XMMS_IPC_CMD_FIRST` which is defined to
   `0x20` in ‘`xmmsc_idnumbers.h`’.

[^byteisoctett]: And when I say *Byte* I mean what most people consider a byte:
   A tuple of eight bits or an octet. If ‘byte’ is used in this text it will
   use that exact sense. Most of the time, I will stick to ‘octet’, though.

Looking at a binary log of a message, it will look like this:

- `4` octets: Object Type
- `4` octets: Command
- `4` octets: Cookie (Example: `00 00 00 00`, purpose unknown thus far)
- `4` octets: Length of Payload Data in octets

The above is the message's header. If the message has payload, the header is
followed by this:

- `n` (where ‘`n`’ is the length from the header) octets: The Payload™, of which
  the first four octets are the payload type.

In short, XMMS2 messages:

- Construct a binary protocol
- with big-endian byte-order.
- Consists of: Type, command, length of payload…
- …and maybe a couple of octets of payload.
- at byte-offsets: `0`, `4`, `12`, `16` and `20`.
- Message can contain an arbitrary payload from a fair set of types.

And that is that. Messages are used to compose requests to a server. The server
will reply in some way or another.


# Replies

Replies are messages the server sends back to a client. Since they *are*
messages, they obviously look like messages:

- `4` octets: Object Type
- `4` octets: Command (`CMD-REPLY` and `CMD-ERROR`)
- `4` octets: Cookie (For example: `00 00 00 00`)
- `4` octets: Length of Payload Data in octets
- (optional) `n` octets (where ‘`n`’ is the length from the header): The
  Payload™, of which the first four octets are the payload type.

This should look familiar, since you have *just* read it a few lines above in
the previous section. Like with general messages the payload part is optional.


# Types

Types in the protocol are expressed as 32 bit unsigned integers. Like every
other multi-octet word, the byte order is big endian.

## Scalar Types

### NONE

This data type connotes the lack of a data type. This is useful, for example,
to express — say — a list of elements of arbitrary data. The lack of a type is
encoded as type id `0` (type tag: `00 00 00 00`).

### INT64

This is the basic integral number type used in XMMS2. It is a signed integer
and is eight octets wide. Negative numbers are expressed as twos-complement
values. The integer type id is `2` (type tag: `00 00 00 02`).

Examples (type tag, then value):

- `10` → `00 00 00 02 00 00 00 00 00 00 00 0a`
- `-10` → `00 00 00 02 ff ff ff ff ff ff ff f6`

### STRING

Strings are another basic data type. Strings in XMMS2 are always encoded in
UTF-8. Strings have the type id `3` (type tag: `00 00 00 03`). Strings are
structured like this:

- `4` octets that is the type tag.
- `4` octets that represent the length of the string (plus one, because …)
- `n+1` octets that is the `n` octets of the UTF-8 string plus a final `00`
  octet.

Example:

- `"foo"` → `00 00 00 03 00 00 00 04 66 6f 6f 00`

### FLOAT

In addition to exact integers, XMMS2 has a second number type to express
non-integers as non-exact floating point numbers. Floats use the type id `9`
(type tag: `00 00 00 09`). Floating point numbers are represented by two 32
bit, twos-complement signed integers: The exponent and the mantissa of the
floating point number. The mantissa is the normalized integral part of the
number, ranged between `0.5` (inclusive) and `1` (exclusive; see `frexp(3)` for
details) and scaled to `INT32_MAX` for positive numbers and `INT32_MIN` for
negative ones. The exponent is to a base of `2` that raises the mantissa to the
original number.

Examples:

- `2` → `00 00 00 09 40 00 00 00 00 00 00 02`
- `-1024` → `00 00 00 09 c0 00 00 00 00 00 00 0b`

### ERROR

At the time of writing, errors are strings that are specially tagged and are
thus interpreted as error messages. The type id for errors is `1` (type tag:
`00 00 00 01`). Otherwise errors and strings are exactly the same.

Example:

- `Error "foo"` → `00 00 00 03 00 00 00 04 66 6f 6f 00`

### BINARY

This data type is used for transfering binary data such as album art. The type
id for binary data is `5` (type tag: `00 00 00 05`). The data is structured
like this:

- `4` octets that is the type tag.
- `4` octets that represent the length of the data.
- `N` octets that is actual binary data.

Example:

- `Binary 01 02 03 04` → `00 00 00 05 00 00 00 04 01 02 03 04`

### BITBUFFER

The bit-buffer type is used by XMMS2's C library internally for tasks such as
serializing the other data types and for building protocol messages. There are
no protocol messages that use the BITBUFFER type as payload or cause the server
to send return values containing this type.

## Complex Types

### LIST

Lists are obviously important in an application such as XMMS2, which have to
play track after track after track. In XMMS2, lists may nest to arbitrary depth
and each entry in a list may be any of the supported types — unless a
restriction is put into place.

The first four Bytes of a list payload is an id, telling whether we're dealing
with a restricted type list[^notypelist]. The next four Bytes contain an
unsigned integer representing the number of octets, that will follow. Next four
Bytes are the type identifier for lists: `00 00 00 06`.

[^notypelist]: If the list is not restricted, the type id is `00 00 00 00`,
   derived from `XMMSV_TYPE_NONE`.

With `PAYLOAD_TYPE` set to `00 00 00 06`:

- `4` octets: Restricted type? (`00 00 00 00` if unrestricted)
- `4` octets: List size (number of entries, not octets)

Then the individual entries are listed (in case the type is *not* restricted):

- `4` octets: Type of entry (e.g. `00 00 00 02` for an INT64 entry)
- (With the INT64 example): `8` octets: Data

- `4` octets: Type of entry (e.g. `00 00 00 03` for a STRING entry)
- `4` octets: `String length + 1` (zero, if string was NULL)
- `(string-length+1)` octets: The String data with a trailing NUL octet.

When the list is a type restricted list, each entry in the list has to be of
that particular type and the individual entries do *not* carry a type tag. So a
list of two integers `(12 23)` looks like this:

- `4` octets: It's a list: `00 00 00 06`
- `4` octets: Restriction on `TYPE-INT64`: `00 00 00 02`
- `4` octets: Length of the list: `00 00 00 02`
- `8` octets: The first integer: `00 00 00 00 00 00 00 0c`
- `8` octets: The second integer: `00 00 00 00 00 00 00 17`

### DICTIONARY

Dictionaries are *key-value* stores. XMMS2's implementation uses strings as
keys and uses hashing to speed up accesses. The hashing however, is not part of
the serializing into a protocol packet: Only keys and values are inserted.

Unlike lists, dictionaries do *not* feature a type-restriction field (even
though the XML IPC description sometimes mentions return values of a dictionary
of a specific type).

Like lists, a dictionary announces the number of key/value pairs it carries
right after its type tag in a 32 Bit unsigned integer. The keys in a dictionary
are actually strings, that don't feature their type tag. So a key called
`"foo"` serializes to `00 00 00 04 66 6f 6f 00`. The value that corresponds to
a key can be any value the protocol supports. So like lists, dictionaries can
be arbitrarily complex structures.

Example:

Let's serialize a dictionary, that contains two key/value pairs:

- `foo` → `23`
- `bar` → `"baz"`

The byte-stream would look like this:

- `4` octets: Payload type tag: `00 00 00 07`
- `4` octets: Number of key/value pairs: `00 00 00 02`
- First key: `8` octets: The key `"foo"`: `00 00 00 04 66 6f 6f 00`
- First value: `12` octets: `23`: `00 00 00 02 00 00 00 00 00 00 00 17`
- Second key: `8` octets: The key `"bar"`: `00 00 00 04 62 61 72 00`
- Second value: `12` octets: `"baz"`: `00 00 00 03 00 00 00 04 62 61 7a 00`

### COLLECTION

The media library, stored within an XMMS2 server, is essentially a set of audio
tracks along with all sorts of meta information for them. Collections are a way
to express sub-sets of that full media library. To do that, they provide ways
to compose arbitrarily complex expressions, that can be used to match parts of
the media library. As such, searching the library can be done using
collections, for example. The server allows the user to store collections next
to playlists as well. That makes it possible to re-use them at will, across the
boundary of server restarts. Applying operators onto collections makes it
possible to turn a collection or combinations of multiple collections into a
playlist.

A collection has three parts of data to it:

- An operator id, that identifies what kind of a collection we're dealing with.
- A dictionary of attributes, that further describe the operation desired by
  the collection.
- A list restricted to integers called `idlist`, that lists media-list
  identifiers of tracks (this rarely used, such as with the `IDLIST` collection
  type).
- A list restricted to collections, that represents the operands to the
  operator named ealier in the collection data structure.

As you can see, there it nothing you don't already know. Let's nevertheless
take a look at an example. Say you'd like to match all the tracks in your
library that are either from an artist called `"Slayer"` or by an artist called
`"Metallica"`. This can be done using two `EQUALS` collections that are
combined using a `UNION` collection.

Specifically, it is the `UNION` collection that takes the `EQUALS` collections
as its operands. The `EQUALS` collections also take an argument, and it is not
obvious what that operand would be. There is another collection type called
`UNIVERSE`, which takes no operands and simply encompasses the entire media
library of the server. We could represent that structure like this:

```
UNION ← {
    EQUALS(artist: Slayer) ← UNIVERSE
    EQUALS(artist: Metallica) ← UNIVERSE
}
```

Now to send something like that to a server, it would need to be serialised
like this:

- `4` octets: Type collection: `00 00 00 04`
- `4` octets: Union operator: `00 00 00 02`
- `4` octets: Size of attributes dictionary (here: empty): `00 00 00 00`
- `4` octets: IDlist type (`INT64`): `00 00 00 02`
- `4` octets: Size of IDlist (here: empty): `00 00 00 00`
- `4` octets: Operand list type (`COLLECTION`): `00 00 00 04`
- `4` octets: Size of operator list: `00 00 00 02`

Here goes the first operand:

- `4` octets: Operand type (`EQUALS`): `00 00 00 08`
- `4` octets: Size of attributes dictionary: `00 00 00 02`
- `10` octets: Key `"field"`: `00 00 00 06 66 69 65 6c 64 00`
- `15` octets: String value `"artist"`: `00 00 00 03 00 00 00 07 61 72 74 69 73 74 00`
- `10` octets: Key `"value"`: `00 00 00 06 76 61 6c 75 65 00`
- `15` octets: String value `"Slayer"`: `00 00 00 03 00 00 00 07 53 6c 61 79 65 72 00`
- `4` octets: IDlist type (`INT64`): `00 00 00 02`
- `4` octets: Size of IDlist (here: empty): `00 00 00 00`
- `4` octets: Operand list type (`COLLECTION`): `00 00 00 04`
- `4` octets: Size of operator list: `00 00 00 01`
- `4` octets: Operand type (`UNIVERSE`): `00 00 00 01`
- `4` octets: Size of attributes dictionary (here: empty): `00 00 00 00`
- `4` octets: IDlist type (`INT64`): `00 00 00 02`
- `4` octets: Size of IDlist (here: empty): `00 00 00 00`
- `4` octets: Operand list type (`COLLECTION`): `00 00 00 04`
- `4` octets: Size of operator list (here: empty): `00 00 00 00`

And here is the second operand:

- `4` octets: Operand type (`EQUALS`): `00 00 00 08`
- `4` octets: Size of attributes dictionary: `00 00 00 02`
- `10` octets: Key `"field"`: `00 00 00 06 66 69 65 6c 64 00`
- `15` octets: String value `"artist"`: `00 00 00 03 00 00 00 07 61 72 74 69 73 74 00`
- `10` octets: Key `"value"`: `00 00 00 06 76 61 6c 75 65 00`
- `18` octets: String value `"Metallica"`: `00 00 00 03 00 00 00 0a 4d 65 74 61 6c 6c 69 63 61 00`
- `4` octets: IDlist type (`INT64`): `00 00 00 02`
- `4` octets: Size of IDlist (here: empty): `00 00 00 00`
- `4` octets: Operand list type (`COLLECTION`): `00 00 00 04`
- `4` octets: Size of operator list: `00 00 00 01`
- `4` octets: Operand type (`UNIVERSE`): `00 00 00 01`
- `4` octets: Size of attributes dictionary (here: empty): `00 00 00 00`
- `4` octets: IDlist type (`INT64`): `00 00 00 02`
- `4` octets: Size of IDlist (here: empty): `00 00 00 00`
- `4` octets: Operand list type (`COLLECTION`): `00 00 00 04`
- `4` octets: Size of operator list (here: empty): `00 00 00 00`

# Requests

All requests that are recognised by a server are described in an XML file that
is shipped with the XMMS2 distribution. It is located in `src/ipc.xml`. Because
this description is available, we will not discuss all the messages that can be
send back and forth between server and client. Use the XML file as a reference
and come back here, if you're unsure about how to serialise on of the
protocol's data types that the requests expect, or that are carried in replies
from the server.

To give you one short example, though: The first thing you send to a server
after connecting to a server is to send a `HELLO` request. This is a request,
that takes two pieces of information to send to the server: The *protocol
version* the client is using as well as the *name of the client*. Its command
id is `32` and it belongs with the `main` object, that has the object id `1`.
Say we're implementing protocol version `24` and our client is called `"foo"`,
and we're writing a synchronous client, so we don't bother to mess with the
`cookie` bit in the header. The message would look like this:

First the header:

- `4` octets: object type: `00 00 00 01`
- `4` octets: command id: `00 00 00 20`
- `4` octets: cookie: `00 00 00 00`
- `4` octets: payload length: `00 00 00 24`

The arguments to a request are always a list, even when there are no arguments,
in which case the payload is an empty list. Here the request takes two
arguments with no type restriction, so the list header looks like this:

- `4` octets: It's a list: `00 00 00 06`
- `4` octets: No restriction: `00 00 00 00`
- `4` octets: Length of the list: `00 00 00 02`

The first list entry is an integer, representing the protocol version:

- `4` octets: Type tag: `00 00 00 02`
- `8` octets: The integer payload: `00 00 00 00 00 00 00 18`

The second entry is a string, representing the client's name:

- `4` octets: Type tag: `00 00 00 03`
- `4` octets: `(string length+1)`: `00 00 00 04`
- `4` octets: String payload: `66 6f 6f 00`


And that is that. Replies look very similar. They mirror the cookie field of
the request that caused them to be sent. The XML file mentioned earlier
documents what types of data are returned by all the avaible requests.


# Errors

Sometimes things go wrong and when they do, the server needs to be able to tell
the client. This is when error messages come into play. Errors are merely
strings with a different type tag, so that they can be recognised as errors.
The describe the condition that caused the error to be triggered within the
server's processing of a request.


# Other Messages

TODO: Signals, broadcasts and client-to-client messages.
