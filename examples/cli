;; -*- scheme-*-

(use-modules (ice-9 format)
             (srfi srfi-11)
             (xmms2 client)
             (xmms2 client synchronous)
             (xmms2 constants)
             (xmms2 constants meta)
             (xmms2 constants collection)
             (xmms2 fetch-spec)
             (xmms2 io)
             ((xmms2 ipc collection) #:prefix coll:)
             (xmms2 ipc main)
             (xmms2 ipc media-library)
             (xmms2 ipc playlist)
             (xmms2 ipc playback)
             (xmms2 payload)
             (xmms2 types))

(define debug? #f)
(define pl property-list->dictionary)

(define generator-map
  `(("play" . ,(lambda (server) (ipc-start)))
    ("stop" . ,(lambda (server) (ipc-stop)))
    ("pause" . ,(lambda (server) (ipc-pause)))
    ("tickle" . ,(lambda (server) (ipc-kill-decoder)))
    ("next" . ,(lambda (server) (ipc-set-next/relative 1)))
    ("prev" . ,(lambda (server) (ipc-set-next/relative -1)))
    ("active-playlist" . ,(lambda (server) (ipc-get-currently-active)))
    ("time" . ,(lambda (server) (ipc-get-playtime)))
    ("statistics" . ,(lambda (server) (ipc-statistics)))
    ("list" .
     ,(lambda (server)
        (ipc-list-entries (request->value server (ipc-get-currently-active)))))

    ("current-track" . ,(lambda (server) (ipc-get-current-identifier)))
    ("list-collections" . ,(lambda (server) (coll:ipc-list "Collections")))

    ("count-tracks" .
     ,(lambda (server)
        (coll:ipc-query (make-universe)
                        (pl #:type "count"))))

    ("list-artists" .
     ,(lambda (server)
        (coll:ipc-query ;; Takes collection and a fetch-spec...
         (make-universe)
         (fetch-spec #:type cluster-list
                     #:cluster-by value
                     #:cluster-field artist
                     #:data (- #:type organize
                               #:data (- #:count (- #:type count)
                                         #:artist (- #:type metadata
                                                     #:fields (artist)
                                                     #:get (value))))))))))

(define (cmd->generator cmd)
  (let ((rv (assoc cmd generator-map)))
    (and rv (cdr rv))))

(define (usage)
  (format #t "usage: cli COMMAND~%")
  (format #t "Available commands: ~a~%"
          (string-join (map car generator-map) ", ")))

(unless (= 2 (length (command-line)))
  (usage)
  (quit 0))

(define command (cadr (command-line)))
(define generator (cmd->generator command))

(unless generator
  (usage)
  (quit 0))

(setlocale LC_ALL "")

(define (fetch-info server id)
  (request->value server (ipc-get-information id)))

(define (get-info info default)
  (if (not info) default
      (cdar (dictionary-data (cdr info)))))

(define (format-track info)
  (let ((artist (dict 'artist info))
        (album (dict 'album info))
        (title (dict 'title info))
        (tracknr (dict 'tracknr info)))
    (format #t "~a - ~a - ~2,'0d. ~a~%"
            (get-info artist "<NoArtist>")
            (get-info album "<NoAlbum>")
            (get-info tracknr 0)
            (get-info title "<NoTitle>"))))

(define (time->pieces ms)
  (define ms-per-second 1000)
  (define ms-per-minute (* 60 ms-per-second))
  (define ms-per-hour (* 60 ms-per-minute))
  (define ms-per-day (* 24 ms-per-hour))
  (define ms-per-year (round (* (inexact->exact 365.2425) ms-per-day)))
  (let loop ((divs (list ms-per-year ms-per-day
                         ms-per-hour ms-per-minute
                         ms-per-second 1))
             (rest ms)
             (acc '()))
    (if (null? divs)
        (apply values (reverse acc))
        (let* ((div (car divs))
               (piece (truncate (/ rest div))))
          (loop (cdr divs) (- rest (* div piece)) (cons piece acc))))))

(define (size->pieces size)
  (let loop ((names '(t g m k b))
             (div (* 1024 1024 1024 1024))
             (rest size)
             (acc '()))
    (if (null? names)
        (apply values (reverse acc))
        (let ((piece (truncate (/ rest div))))
          (loop (cdr names) (/ div 1024) (- rest (* div piece))
                (cons piece acc))))))

(define (format-stat n v)
  (case n
    ((uptime)
     (let-values (((y d h m s ms) (time->pieces (* v 1000))))
       (format #t "~10,,,@a: ~d year~p ~d day~p ~2,'0d hour~p ~2,'0d minute~p ~2,'0d second~p~%"
               n y y d d h h m m s s)))
    ((duration playtime)
     (let-values (((y d h m s ms) (time->pieces v)))
       (format #t "~10,,,@a: ~d year~p ~d day~p ~2,'0d hour~p ~2,'0d minute~p ~2,'0d.~3,'0d seconds~%"
               n y y d d h h m m s ms)))
    ((size)
     (let-values (((t g m k b) (size->pieces v)))
       (format #t "~10,,,@a: ~d TiB~p, ~d GiB~p, ~d MiB~p, ~d KiB~p, ~d Byte~p~%"
               n t t g g m m k k b b)))
    (else (format #t "~10,,,@a: ~a~%" n v))))

(define (output-collection data indent)
  (format #t "~v_Operator: ~a => ~a~%"
          (if (> indent 2) indent 0)
          (collection-operator data)
          (assq-ref xref-collection-types (collection-operator data)))
  (format #t "~v_ID-List: ~s~%" indent (collection-idlist data))
  (format #t "~v_Attributes: ~s~%" indent (collection-attributes data))
  (format #t "~v_Children:~%" indent)
  (for-each (lambda (x) (output-collection x (+ indent 2)))
            (collection-children data)))

(define (show-collection server c)
  (let ((data (request->value server (coll:ipc-get c "Collections"))))
    (format #t "~%Name: ~s, " c)
    (output-collection data 2)))

(define (sort-artists lst)
  (sort lst (lambda (a b)
              (let ((a* (dict-ref 'count a))
                    (b* (dict-ref 'count b)))
                (< a* b*)))))

(define (main server client-id cookie)
  (let ((reply (request->value server (generator server))))
    (cond
     ((string=? command "statistics")
      (for-each (lambda (x)
                  (let ((name (car x))
                        (value (cdr x)))
                    (format-stat name value)))
                (dictionary-data reply)))
     ((string=? command "current-track")
      (display "np: ")
      (format-track (fetch-info server reply)))
     ((string=? command "list")
      (for-each (lambda (x) (format-track (fetch-info server x))) reply))
     ((string=? command "active-playlist")
      (format #t "Active Playlist: ~a~%" reply))
     ((string=? command "list-collections")
      (format #t "Collections:~%")
      (for-each (lambda (x) (show-collection server x)) reply))
     ((string=? command "time")
      (let* ((time-ms reply)
             (ms (modulo time-ms 1000))
             (time (truncate (/ time-ms 1000)))
             (min (truncate (/ time 60)))
             (sec (modulo time 60)))
        (format #t "Current playtime:  ~d:~2,'0d.~3,'0d~%" min sec ms)))
     ((string=? command "count-tracks")
      (format #t "Server Media-library contains ~a tracks.~%" reply))
     ((string=? command "list-artists")
      (let loop ((rest (reverse (sort-artists reply))))
        (if (null? rest)
            #t
            (let ((data (dictionary-data (car rest))))
              (format #t "~a Tracks by ~a~%"
                      (assq-ref data 'count)
                      (assq-ref data 'artist))
              (loop (cdr rest))))))
     (else
      (if debug?
          (format #t "~a: ~s~%" command reply)))))
  (when (or (string=? command "next")
            (string=? command "prev"))
    (request->reply server (ipc-kill-decoder))))

(with-xmms2-connection #:handler main
                       #:client "example-sync-client"
                       #:server (let* ((env (getenv "XMMS2_GUILE_USE_SOCAT"))
                                       (use-socat? (and env (string=? env "1")))
                                       (uri (default-uri)))
                                  (if use-socat?
                                      (string-append uri ".socat")
                                      uri)))
